{
    "StartAt": "UpdateDeploymentState",
    "States": {
        "UpdateDeploymentState": {
            "QueryLanguage": "JSONata",
            "Type": "Task",
            "Resource": "arn:aws:states:::aws-sdk:dynamodb:updateItem",
            "Arguments": {
              "TableName": "${TableName}",
              "Key": {
                  "pk": { "S": "tester" },
                  "sk": { "S": "activity" }
              },
              "UpdateExpression": "SET ServiceStop = :newStop",
              "ExpressionAttributeValues": {
                  ":newStop": {
                      "N": "{% $string($millis() + ${TimeoutMilliseconds}) %}"
                  }
              },
              "ReturnValues": "ALL_OLD"
            },
            "Assign": {
                "shouldStart": "{% $number($states.result.Attributes.ServiceStop.N) < $millis() %}",
                "serviceStart": "{% $number($states.result.Attributes.ServiceStarted.N) %}"
            },
            "Next": "ShouldServiceStart"
        },
        "ShouldServiceStart": {
          "QueryLanguage": "JSONata",
          "Type": "Choice",
          "Choices": [
            {
              "Next": "StartService",
              "Condition": "{% $shouldStart %}"
            }
          ],
          "Assign": {
              "serviceStart": "{% $serviceStart %}"
          },
          "Default": "ShouldMessageWait"
        },
        "StartService": {
          "QueryLanguage": "JSONata",
          "Type": "Task",
          "Resource": "arn:aws:states:::aws-sdk:ecs:updateService",
          "Arguments": {
            "Cluster": "${ClusterName}",
            "Service": "${ServiceName}",
            "DesiredCount": 1
          },
          "Next": "UpdateServiceStart"
        },
        "UpdateServiceStart": {
            "QueryLanguage": "JSONata",
            "Type": "Task",
            "Resource": "arn:aws:states:::aws-sdk:dynamodb:updateItem",
            "Arguments": {
              "TableName": "${TableName}",
              "Key": {
                  "pk": { "S": "tester" },
                  "sk": { "S": "activity" }
              },
              "UpdateExpression": "SET ServiceStarted = :newStart",
              "ExpressionAttributeValues": {
                  ":newStart": {
                      "N": "{% $string($millis()) %}"
                  }
              },
              "ReturnValues": "UPDATED_NEW"
            },
            "Assign": {
              "serviceStart": "{% $number($states.result.Attributes.ServiceStarted.N) %}"
            },
            "Next": "ShouldMessageWait"
        },
        "ShouldMessageWait": {
          "QueryLanguage": "JSONata",
          "Type": "Choice",
          "Choices": [
            {
              "Next": "MessageWait",
              "Condition": "{% $serviceStart + 7000 > $millis() %}"
            }
          ],
          "Assign": {
              "serviceStart": "{% $serviceStart %}",
              "all": "{% $states %}"
          },
          "Default": "QueryUserEnvironments"
        },
        "MessageWait": {
          "QueryLanguage": "JSONata",
          "Type": "Wait",
          "Seconds": 7,
          "Next": "QueryUserEnvironments"
        },
        "QueryUserEnvironments": {
          "QueryLanguage": "JSONata",
          "Type": "Task",
          "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
          "Arguments": {
            "TableName": "${TableName}",
            "KeyConditionExpression": "#pk = :pkval",
            "ExpressionAttributeNames": {
              "#pk": "pk"
            },
            "ExpressionAttributeValues": {
              ":pkval": {
                "S": "{% $join(['user_', $states.context.Execution.Input.User, '#environments']) %}"
              }
            }
          },
          "Next": "SelectData"
        },
        "SelectData": {
          "QueryLanguage": "JSONata",
          "Type": "Pass",
          "Output": {
            "RoleA": "{% $states.input.Items[EnvironmentName.S=$states.context.Execution.Input.Environments.A].TesterRole.S %}",
            "RoleB": "{% $exists($states.context.Execution.Input.Environments.B) ? $states.input.Items[EnvironmentName.S=$states.context.Execution.Input.Environments.B].TesterRole.S : '' %}",
            "RegionA": "{% $states.input.Items[0].Region.S %}",
            "RegionB": "{% $states.input.Items[0].Region2.S %}",
            "ExecutionId": "{% $split($states.context.Execution.Id, ':')[7] %}"
          },
          "Next": "SendSqsMessage"
        },
        "SendSqsMessage": {
          "QueryLanguage": "JSONPath",
          "Type": "Task",
          "Resource": "arn:aws:states:::sqs:sendMessage.waitForTaskToken",
          "Parameters": {
            "QueueUrl": "${QueueUrl}",
            "MessageBody": {
              "StepFunctionsToken.$": "$$.Task.Token",
              "Payload": {
                "Input": {
                  "Lab.$": "$$.Execution.Input.Lab",
                  "User.$": "$$.Execution.Input.User",
                  "Stage.$": "$$.Execution.Input.Stage",
                  "Path.$": "$$.Execution.Input.Path",
                  "Parameters.$": "$$.Execution.Input.Parameters",
                  "ExecutionId.$": "$.ExecutionId"
                },
                "Environment.$": "$"
              }
              
            }
          },
          "End": true
        }
    }
}