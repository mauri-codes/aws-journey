{
    "QueryLanguage": "JSONata",
    "StartAt": "UpdateDeploymentState",
    "States": {
        "UpdateDeploymentState": {
            "Type": "Task",
            "Resource": "arn:aws:states:::aws-sdk:dynamodb:updateItem",
            "Arguments": {
              "TableName": "${TableName}",
              "Key": {
                  "pk": { "S": "tester" },
                  "sk": { "S": "activity" }
              },
              "UpdateExpression": "SET ServiceStop = :newStop",
              "ExpressionAttributeValues": {
                  ":newStop": {
                      "N": "{% $string($millis() + ${TimeoutMilliseconds}) %}"
                  }
              },
              "ReturnValues": "ALL_OLD"
            },
            "Assign": {
                "shouldStart": "{% $number($states.result.Attributes.ServiceStop.N) < $millis() %}",
                "serviceStart": "{% $number($states.result.Attributes.ServiceStarted.N) %}"
            },
            "Next": "ShouldServiceStart"
        },
        "ShouldServiceStart": {
          "Type": "Choice",
          "Choices": [
            {
              "Next": "StartService",
              "Condition": "{% $shouldStart %}"
            }
          ],
          "Assign": {
              "serviceStart": "{% $serviceStart %}"
          },
          "Default": "ShouldMessageWait"
        },
        "StartService": {
          "Type": "Task",
          "Resource": "arn:aws:states:::aws-sdk:ecs:updateService",
          "Arguments": {
            "Cluster": "${ClusterName}",
            "Service": "${ServiceName}",
            "DesiredCount": 1
          },
          "Next": "UpdateServiceStart"
        },
        "UpdateServiceStart": {
            "Type": "Task",
            "Resource": "arn:aws:states:::aws-sdk:dynamodb:updateItem",
            "Arguments": {
              "TableName": "${TableName}",
              "Key": {
                  "pk": { "S": "tester" },
                  "sk": { "S": "activity" }
              },
              "UpdateExpression": "SET ServiceStarted = :newStart",
              "ExpressionAttributeValues": {
                  ":newStart": {
                      "N": "{% $string($millis()) %}"
                  }
              },
              "ReturnValues": "UPDATED_NEW"
            },
            "Assign": {
                "serviceStart": "{% $number($states.result.Attributes.ServiceStarted.N) %}"
            },
            "Next": "ShouldMessageWait"
        },
        "ShouldMessageWait": {
          "Type": "Choice",
          "Choices": [
            {
              "Next": "MessageWait",
              "Condition": "{% $serviceStart + 7000 > $millis() %}"
            }
          ],
          "Assign": {
              "serviceStart": "{% $serviceStart %}",
              "all": "{% $states %}"
          },
          "Default": "SendSqsMessage"
        },
        "MessageWait": {
          "Type": "Wait",
          "Seconds": 7,
          "Next": "SendSqsMessage"
        },
        "SendSqsMessage": {
          "Type": "Task",
          "Resource": "arn:aws:states:::sqs:sendMessage.waitForTaskToken",
          "Arguments": {
            "QueueUrl": "${QueueUrl}",
            "MessageBody": {
              "taskToken": "$$Task.Token",
              "User": "user1",
              "Lab": "lab1"
            }
          },
          "End": true
        }
    }
}