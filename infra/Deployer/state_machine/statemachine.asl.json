{
   "Comment": "User Deployment steps",
   "StartAt": "StartDeployment",
   "States": {
      "StartDeployment": {
         "Type": "Task",
         "Resource": "arn:aws:states:::lambda:invoke",
         "Next": "Deploy",
         "Parameters": {
            "FunctionName": "${StartDeploymentFunctionArn}",
            "Payload": {
               "Step": "StartDeployment",
               "Action.$": "$.Action",
               "LabId.$": "$.LabId",
               "EnvName.$": "$.EnvName",
               "LabPath.$": "$.LabPath",
               "StageId.$": "$.StageId",
               "UserId.$": "$.UserId",
               "RunId.$": "$.RunId",
               "Params.$": "$.Params"
            }
         },
         "ResultSelector": {
            "Step": "Deploy",
            "Action.$": "$.Payload.Action",
            "LabId.$": "$.Payload.LabId",
            "EnvName.$": "$.Payload.EnvName",
            "LabPath.$": "$.Payload.LabPath",
            "StageId.$": "$.Payload.StageId",
            "UserId.$": "$.Payload.UserId",
            "RunId.$": "$.Payload.RunId"
         },
         "Catch": [
            {
               "ErrorEquals": [
                  "States.ALL"
               ],
               "ResultPath": "$",
               "Next": "LambdaErrorHandler"
            }
         ]
      },
      "Deploy": {
         "Type": "Task",
         "Resource": "arn:aws:states:::codebuild:startBuild.sync",
         "Next": "CloseDeployment",
         "Parameters": {
            "ProjectName": "${DeployCodebuildProjectArn}",
            "EnvironmentVariablesOverride": [
               {
                  "Name": "ACTION",
                  "Type": "PLAINTEXT",
                  "Value.$": "$.Action"
               },
               {
                  "Name": "LAB_ID",
                  "Type": "PLAINTEXT",
                  "Value.$": "$.LabId"
               },
               {
                  "Name": "LAB_PATH",
                  "Type": "PLAINTEXT",
                  "Value.$": "$.LabPath"
               },
               {
                  "Name": "ENV_NAME",
                  "Type": "PLAINTEXT",
                  "Value.$": "$.EnvName"
               },
               {
                  "Name": "STAGE_ID",
                  "Type": "PLAINTEXT",
                  "Value.$": "$.StageId"
               },
               {
                  "Name": "USER_ID",
                  "Type": "PLAINTEXT",
                  "Value.$": "$.UserId"
               },
               {
                  "Name": "RUN_ID",
                  "Type": "PLAINTEXT",
                  "Value.$": "$.RunId"
               }
            ]
         },
         "ResultSelector": {
            "Step": "CloseDeployment",
            "BuildId.$": "$.Build.Id",
            "LogGroupName.$": "$.Build.Logs.GroupName",
            "Action.$": "$.Build.Environment.EnvironmentVariables[?(@.Name == 'ACTION')].Value",
            "RunId.$": "$.Build.Environment.EnvironmentVariables[?(@.Name == 'RUN_ID')].Value",
            "LabId.$": "$.Build.Environment.EnvironmentVariables[?(@.Name == 'LAB_ID')].Value",
            "StageId.$": "$.Build.Environment.EnvironmentVariables[?(@.Name == 'STAGE_ID')].Value",
            "EnvName.$": "$.Build.Environment.EnvironmentVariables[?(@.Name == 'ENV_NAME')].Value",
            "LabPath.$": "$.Build.Environment.EnvironmentVariables[?(@.Name == 'LAB_PATH')].Value",
            "UserId.$": "$.Build.Environment.EnvironmentVariables[?(@.Name == 'USER_ID')].Value"
         },
         "Catch": [
            {
               "ErrorEquals": [
                  "States.ALL"
               ],
               "ResultPath": "$",
               "Next": "ParseErrorCause"
            }
         ]
      },
      "CloseDeployment": {
         "Type": "Task",
         "Resource": "arn:aws:states:::lambda:invoke",
         "Parameters": {
            "FunctionName": "${CloseDeploymentFunctionArn}",
            "Payload.$": "$"
         },
         "End": true,
         "Catch": [
            {
               "ErrorEquals": [
                  "States.ALL"
               ],
               "ResultPath": null,
               "Next": "LambdaErrorHandler"
            }
         ]
      },
      "LambdaErrorHandler": {
         "Type": "Task",
         "Resource": "arn:aws:states:::lambda:invoke",
         "Parameters": {
            "FunctionName": "${LambdaErrorHandlerArn}",
            "Payload.$": "$"
         },
         "End": true
      },
      "ParseErrorCause": {
         "Type": "Pass",
         "Parameters": {
            "Result.$": "States.StringToJson($.Cause)"
         },
         "ResultPath": "$",
         "Next": "CodebuildErrorHandler"
      },
      "CodebuildErrorHandler": {
         "Type": "Task",
         "Resource": "arn:aws:states:::lambda:invoke",
         "Parameters": {
            "FunctionName": "${CodebuildErrorHandlerArn}",
            "Payload": {
               "Step": "Deploy",
               "BuildId.$": "$.Result.Build.Id",
               "LogGroupName.$": "$.Result.Build.Logs.GroupName",
               "Action.$": "$.Result.Build.Environment.EnvironmentVariables[?(@.Name == 'ACTION')].Value",
               "RunId.$": "$.Result.Build.Environment.EnvironmentVariables[?(@.Name == 'RUN_ID')].Value",
               "LabId.$": "$.Result.Build.Environment.EnvironmentVariables[?(@.Name == 'LAB_ID')].Value",
               "EnvName.$": "$.Result.Build.Environment.EnvironmentVariables[?(@.Name == 'ENV_NAME')].Value",
               "LabPath.$": "$.Result.Build.Environment.EnvironmentVariables[?(@.Name == 'LAB_PATH')].Value",
               "StageId.$": "$.Result.Build.Environment.EnvironmentVariables[?(@.Name == 'STAGE_ID')].Value",
               "UserId.$": "$.Result.Build.Environment.EnvironmentVariables[?(@.Name == 'USER_ID')].Value",
               "ErrorPhases.$": "$.Result.Build.Phases[?(@.PhaseStatus == 'FAILED')]"
            }
         },
         "End": true
      }
   }
}